/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LayoutImport } from "./routes/_layout";
import { Route as LayoutProjectSlugWorkflowSlugVVersionImport } from "./routes/_layout.$projectSlug/$workflowSlug.v.$version";
import { Route as LayoutProjectSlugWorkflowSlugLayoutImport } from "./routes/_layout.$projectSlug/$workflowSlug/_layout";
import { Route as LayoutProjectSlugWorkflowSlugLayoutApiImport } from "./routes/_layout.$projectSlug/$workflowSlug/_layout.api";
import { Route as LayoutProjectSlugWorkflowSlugLayoutIndexImport } from "./routes/_layout.$projectSlug/$workflowSlug/_layout.index";
import { Route as LayoutProjectSlugWorkflowSlugLayoutVersionsImport } from "./routes/_layout.$projectSlug/$workflowSlug/_layout.versions";
import { Route as LayoutProjectSlugIndexImport } from "./routes/_layout.$projectSlug/index";
import { Route as LayoutProjectSlugUsersUsersImport } from "./routes/_layout.$projectSlug/users/users";
import { Route as LayoutProjectSlugUsersUsersUserIdImport } from "./routes/_layout.$projectSlug/users/users.$userId";
import { Route as LayoutProjectSlugUsersUsersIndexImport } from "./routes/_layout.$projectSlug/users/users.index";
import { Route as LayoutExploreImport } from "./routes/_layout.explore";
import { Route as PublicImport } from "./routes/_public";
import { Route as PublicIndexImport } from "./routes/_public/index";
import { Route as DeferredImport } from "./routes/deferred";
import { Route as PostsImport } from "./routes/posts";
import { Route as PostsPostIdDeepImport } from "./routes/posts_.$postId.deep";
import { Route as PostsPostIdImport } from "./routes/posts.$postId";
import { Route as PostsIndexImport } from "./routes/posts.index";
import { Route as RedirectImport } from "./routes/redirect";
import { Route as UsersImport } from "./routes/users";
import { Route as UsersUserIdImport } from "./routes/users.$userId";
import { Route as UsersIndexImport } from "./routes/users.index";

// Create Virtual Routes

const LayoutProjectSlugWorkflowSlugImport = createFileRoute(
  "/_layout/$projectSlug/$workflowSlug",
)();

// Create/Update Routes

const UsersRoute = UsersImport.update({
  path: "/users",
  getParentRoute: () => rootRoute,
} as any);

const RedirectRoute = RedirectImport.update({
  path: "/redirect",
  getParentRoute: () => rootRoute,
} as any);

const PostsRoute = PostsImport.update({
  path: "/posts",
  getParentRoute: () => rootRoute,
} as any);

const DeferredRoute = DeferredImport.update({
  path: "/deferred",
  getParentRoute: () => rootRoute,
} as any);

const PublicRoute = PublicImport.update({
  id: "/_public",
  getParentRoute: () => rootRoute,
} as any);

const LayoutRoute = LayoutImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any);

const UsersIndexRoute = UsersIndexImport.update({
  path: "/",
  getParentRoute: () => UsersRoute,
} as any);

const PostsIndexRoute = PostsIndexImport.update({
  path: "/",
  getParentRoute: () => PostsRoute,
} as any);

const PublicIndexRoute = PublicIndexImport.update({
  path: "/",
  getParentRoute: () => PublicRoute,
} as any);

const UsersUserIdRoute = UsersUserIdImport.update({
  path: "/$userId",
  getParentRoute: () => UsersRoute,
} as any);

const PostsPostIdRoute = PostsPostIdImport.update({
  path: "/$postId",
  getParentRoute: () => PostsRoute,
} as any);

const LayoutExploreRoute = LayoutExploreImport.update({
  path: "/explore",
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutProjectSlugWorkflowSlugRoute =
  LayoutProjectSlugWorkflowSlugImport.update({
    path: "/$projectSlug/$workflowSlug",
    getParentRoute: () => LayoutRoute,
  } as any);

const LayoutProjectSlugIndexRoute = LayoutProjectSlugIndexImport.update({
  path: "/$projectSlug/",
  getParentRoute: () => LayoutRoute,
} as any);

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  path: "/posts/$postId/deep",
  getParentRoute: () => rootRoute,
} as any);

const LayoutProjectSlugUsersUsersRoute =
  LayoutProjectSlugUsersUsersImport.update({
    path: "/$projectSlug/users/users",
    getParentRoute: () => LayoutRoute,
  } as any);

const LayoutProjectSlugWorkflowSlugLayoutRoute =
  LayoutProjectSlugWorkflowSlugLayoutImport.update({
    id: "/_layout",
    getParentRoute: () => LayoutProjectSlugWorkflowSlugRoute,
  } as any);

const LayoutProjectSlugUsersUsersIndexRoute =
  LayoutProjectSlugUsersUsersIndexImport.update({
    path: "/",
    getParentRoute: () => LayoutProjectSlugUsersUsersRoute,
  } as any);

const LayoutProjectSlugWorkflowSlugLayoutIndexRoute =
  LayoutProjectSlugWorkflowSlugLayoutIndexImport.update({
    path: "/",
    getParentRoute: () => LayoutProjectSlugWorkflowSlugLayoutRoute,
  } as any);

const LayoutProjectSlugUsersUsersUserIdRoute =
  LayoutProjectSlugUsersUsersUserIdImport.update({
    path: "/$userId",
    getParentRoute: () => LayoutProjectSlugUsersUsersRoute,
  } as any);

const LayoutProjectSlugWorkflowSlugVVersionRoute =
  LayoutProjectSlugWorkflowSlugVVersionImport.update({
    path: "/v/$version",
    getParentRoute: () => LayoutProjectSlugWorkflowSlugRoute,
  } as any);

const LayoutProjectSlugWorkflowSlugLayoutVersionsRoute =
  LayoutProjectSlugWorkflowSlugLayoutVersionsImport.update({
    path: "/versions",
    getParentRoute: () => LayoutProjectSlugWorkflowSlugLayoutRoute,
  } as any);

const LayoutProjectSlugWorkflowSlugLayoutApiRoute =
  LayoutProjectSlugWorkflowSlugLayoutApiImport.update({
    path: "/api",
    getParentRoute: () => LayoutProjectSlugWorkflowSlugLayoutRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/_public": {
      id: "/_public";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof PublicImport;
      parentRoute: typeof rootRoute;
    };
    "/deferred": {
      id: "/deferred";
      path: "/deferred";
      fullPath: "/deferred";
      preLoaderRoute: typeof DeferredImport;
      parentRoute: typeof rootRoute;
    };
    "/posts": {
      id: "/posts";
      path: "/posts";
      fullPath: "/posts";
      preLoaderRoute: typeof PostsImport;
      parentRoute: typeof rootRoute;
    };
    "/redirect": {
      id: "/redirect";
      path: "/redirect";
      fullPath: "/redirect";
      preLoaderRoute: typeof RedirectImport;
      parentRoute: typeof rootRoute;
    };
    "/users": {
      id: "/users";
      path: "/users";
      fullPath: "/users";
      preLoaderRoute: typeof UsersImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/explore": {
      id: "/_layout/explore";
      path: "/explore";
      fullPath: "/explore";
      preLoaderRoute: typeof LayoutExploreImport;
      parentRoute: typeof LayoutImport;
    };
    "/posts/$postId": {
      id: "/posts/$postId";
      path: "/$postId";
      fullPath: "/posts/$postId";
      preLoaderRoute: typeof PostsPostIdImport;
      parentRoute: typeof PostsImport;
    };
    "/users/$userId": {
      id: "/users/$userId";
      path: "/$userId";
      fullPath: "/users/$userId";
      preLoaderRoute: typeof UsersUserIdImport;
      parentRoute: typeof UsersImport;
    };
    "/_public/": {
      id: "/_public/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof PublicIndexImport;
      parentRoute: typeof PublicImport;
    };
    "/posts/": {
      id: "/posts/";
      path: "/";
      fullPath: "/posts/";
      preLoaderRoute: typeof PostsIndexImport;
      parentRoute: typeof PostsImport;
    };
    "/users/": {
      id: "/users/";
      path: "/";
      fullPath: "/users/";
      preLoaderRoute: typeof UsersIndexImport;
      parentRoute: typeof UsersImport;
    };
    "/posts/$postId/deep": {
      id: "/posts/$postId/deep";
      path: "/posts/$postId/deep";
      fullPath: "/posts/$postId/deep";
      preLoaderRoute: typeof PostsPostIdDeepImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/$projectSlug/": {
      id: "/_layout/$projectSlug/";
      path: "/$projectSlug";
      fullPath: "/$projectSlug";
      preLoaderRoute: typeof LayoutProjectSlugIndexImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/$projectSlug/$workflowSlug": {
      id: "/_layout/$projectSlug/$workflowSlug";
      path: "/$projectSlug/$workflowSlug";
      fullPath: "/$projectSlug/$workflowSlug";
      preLoaderRoute: typeof LayoutProjectSlugWorkflowSlugImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/$projectSlug/$workflowSlug/_layout": {
      id: "/_layout/$projectSlug/$workflowSlug/_layout";
      path: "/$projectSlug/$workflowSlug";
      fullPath: "/$projectSlug/$workflowSlug";
      preLoaderRoute: typeof LayoutProjectSlugWorkflowSlugLayoutImport;
      parentRoute: typeof LayoutProjectSlugWorkflowSlugRoute;
    };
    "/_layout/$projectSlug/users/users": {
      id: "/_layout/$projectSlug/users/users";
      path: "/$projectSlug/users/users";
      fullPath: "/$projectSlug/users/users";
      preLoaderRoute: typeof LayoutProjectSlugUsersUsersImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/$projectSlug/$workflowSlug/_layout/api": {
      id: "/_layout/$projectSlug/$workflowSlug/_layout/api";
      path: "/api";
      fullPath: "/$projectSlug/$workflowSlug/api";
      preLoaderRoute: typeof LayoutProjectSlugWorkflowSlugLayoutApiImport;
      parentRoute: typeof LayoutProjectSlugWorkflowSlugLayoutImport;
    };
    "/_layout/$projectSlug/$workflowSlug/_layout/versions": {
      id: "/_layout/$projectSlug/$workflowSlug/_layout/versions";
      path: "/versions";
      fullPath: "/$projectSlug/$workflowSlug/versions";
      preLoaderRoute: typeof LayoutProjectSlugWorkflowSlugLayoutVersionsImport;
      parentRoute: typeof LayoutProjectSlugWorkflowSlugLayoutImport;
    };
    "/_layout/$projectSlug/$workflowSlug/v/$version": {
      id: "/_layout/$projectSlug/$workflowSlug/v/$version";
      path: "/v/$version";
      fullPath: "/$projectSlug/$workflowSlug/v/$version";
      preLoaderRoute: typeof LayoutProjectSlugWorkflowSlugVVersionImport;
      parentRoute: typeof LayoutProjectSlugWorkflowSlugImport;
    };
    "/_layout/$projectSlug/users/users/$userId": {
      id: "/_layout/$projectSlug/users/users/$userId";
      path: "/$userId";
      fullPath: "/$projectSlug/users/users/$userId";
      preLoaderRoute: typeof LayoutProjectSlugUsersUsersUserIdImport;
      parentRoute: typeof LayoutProjectSlugUsersUsersImport;
    };
    "/_layout/$projectSlug/$workflowSlug/_layout/": {
      id: "/_layout/$projectSlug/$workflowSlug/_layout/";
      path: "/";
      fullPath: "/$projectSlug/$workflowSlug/";
      preLoaderRoute: typeof LayoutProjectSlugWorkflowSlugLayoutIndexImport;
      parentRoute: typeof LayoutProjectSlugWorkflowSlugLayoutImport;
    };
    "/_layout/$projectSlug/users/users/": {
      id: "/_layout/$projectSlug/users/users/";
      path: "/";
      fullPath: "/$projectSlug/users/users/";
      preLoaderRoute: typeof LayoutProjectSlugUsersUsersIndexImport;
      parentRoute: typeof LayoutProjectSlugUsersUsersImport;
    };
  }
}

// Create and export the route tree

interface LayoutProjectSlugWorkflowSlugLayoutRouteChildren {
  LayoutProjectSlugWorkflowSlugLayoutApiRoute: typeof LayoutProjectSlugWorkflowSlugLayoutApiRoute;
  LayoutProjectSlugWorkflowSlugLayoutVersionsRoute: typeof LayoutProjectSlugWorkflowSlugLayoutVersionsRoute;
  LayoutProjectSlugWorkflowSlugLayoutIndexRoute: typeof LayoutProjectSlugWorkflowSlugLayoutIndexRoute;
}

const LayoutProjectSlugWorkflowSlugLayoutRouteChildren: LayoutProjectSlugWorkflowSlugLayoutRouteChildren =
  {
    LayoutProjectSlugWorkflowSlugLayoutApiRoute:
      LayoutProjectSlugWorkflowSlugLayoutApiRoute,
    LayoutProjectSlugWorkflowSlugLayoutVersionsRoute:
      LayoutProjectSlugWorkflowSlugLayoutVersionsRoute,
    LayoutProjectSlugWorkflowSlugLayoutIndexRoute:
      LayoutProjectSlugWorkflowSlugLayoutIndexRoute,
  };

const LayoutProjectSlugWorkflowSlugLayoutRouteWithChildren =
  LayoutProjectSlugWorkflowSlugLayoutRoute._addFileChildren(
    LayoutProjectSlugWorkflowSlugLayoutRouteChildren,
  );

interface LayoutProjectSlugWorkflowSlugRouteChildren {
  LayoutProjectSlugWorkflowSlugLayoutRoute: typeof LayoutProjectSlugWorkflowSlugLayoutRouteWithChildren;
  LayoutProjectSlugWorkflowSlugVVersionRoute: typeof LayoutProjectSlugWorkflowSlugVVersionRoute;
}

const LayoutProjectSlugWorkflowSlugRouteChildren: LayoutProjectSlugWorkflowSlugRouteChildren =
  {
    LayoutProjectSlugWorkflowSlugLayoutRoute:
      LayoutProjectSlugWorkflowSlugLayoutRouteWithChildren,
    LayoutProjectSlugWorkflowSlugVVersionRoute:
      LayoutProjectSlugWorkflowSlugVVersionRoute,
  };

const LayoutProjectSlugWorkflowSlugRouteWithChildren =
  LayoutProjectSlugWorkflowSlugRoute._addFileChildren(
    LayoutProjectSlugWorkflowSlugRouteChildren,
  );

interface LayoutProjectSlugUsersUsersRouteChildren {
  LayoutProjectSlugUsersUsersUserIdRoute: typeof LayoutProjectSlugUsersUsersUserIdRoute;
  LayoutProjectSlugUsersUsersIndexRoute: typeof LayoutProjectSlugUsersUsersIndexRoute;
}

const LayoutProjectSlugUsersUsersRouteChildren: LayoutProjectSlugUsersUsersRouteChildren =
  {
    LayoutProjectSlugUsersUsersUserIdRoute:
      LayoutProjectSlugUsersUsersUserIdRoute,
    LayoutProjectSlugUsersUsersIndexRoute:
      LayoutProjectSlugUsersUsersIndexRoute,
  };

const LayoutProjectSlugUsersUsersRouteWithChildren =
  LayoutProjectSlugUsersUsersRoute._addFileChildren(
    LayoutProjectSlugUsersUsersRouteChildren,
  );

interface LayoutRouteChildren {
  LayoutExploreRoute: typeof LayoutExploreRoute;
  LayoutProjectSlugIndexRoute: typeof LayoutProjectSlugIndexRoute;
  LayoutProjectSlugWorkflowSlugRoute: typeof LayoutProjectSlugWorkflowSlugRouteWithChildren;
  LayoutProjectSlugUsersUsersRoute: typeof LayoutProjectSlugUsersUsersRouteWithChildren;
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutExploreRoute: LayoutExploreRoute,
  LayoutProjectSlugIndexRoute: LayoutProjectSlugIndexRoute,
  LayoutProjectSlugWorkflowSlugRoute:
    LayoutProjectSlugWorkflowSlugRouteWithChildren,
  LayoutProjectSlugUsersUsersRoute:
    LayoutProjectSlugUsersUsersRouteWithChildren,
};

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren);

interface PublicRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute;
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
};

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren);

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute;
  PostsIndexRoute: typeof PostsIndexRoute;
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
};

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren);

interface UsersRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute;
  UsersIndexRoute: typeof UsersIndexRoute;
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
};

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren);

export interface FileRoutesByFullPath {
  "": typeof PublicRouteWithChildren;
  "/deferred": typeof DeferredRoute;
  "/posts": typeof PostsRouteWithChildren;
  "/redirect": typeof RedirectRoute;
  "/users": typeof UsersRouteWithChildren;
  "/explore": typeof LayoutExploreRoute;
  "/posts/$postId": typeof PostsPostIdRoute;
  "/users/$userId": typeof UsersUserIdRoute;
  "/": typeof PublicIndexRoute;
  "/posts/": typeof PostsIndexRoute;
  "/users/": typeof UsersIndexRoute;
  "/posts/$postId/deep": typeof PostsPostIdDeepRoute;
  "/$projectSlug": typeof LayoutProjectSlugIndexRoute;
  "/$projectSlug/$workflowSlug": typeof LayoutProjectSlugWorkflowSlugLayoutRouteWithChildren;
  "/$projectSlug/users/users": typeof LayoutProjectSlugUsersUsersRouteWithChildren;
  "/$projectSlug/$workflowSlug/api": typeof LayoutProjectSlugWorkflowSlugLayoutApiRoute;
  "/$projectSlug/$workflowSlug/versions": typeof LayoutProjectSlugWorkflowSlugLayoutVersionsRoute;
  "/$projectSlug/$workflowSlug/v/$version": typeof LayoutProjectSlugWorkflowSlugVVersionRoute;
  "/$projectSlug/users/users/$userId": typeof LayoutProjectSlugUsersUsersUserIdRoute;
  "/$projectSlug/$workflowSlug/": typeof LayoutProjectSlugWorkflowSlugLayoutIndexRoute;
  "/$projectSlug/users/users/": typeof LayoutProjectSlugUsersUsersIndexRoute;
}

export interface FileRoutesByTo {
  "": typeof LayoutRouteWithChildren;
  "/deferred": typeof DeferredRoute;
  "/redirect": typeof RedirectRoute;
  "/explore": typeof LayoutExploreRoute;
  "/posts/$postId": typeof PostsPostIdRoute;
  "/users/$userId": typeof UsersUserIdRoute;
  "/": typeof PublicIndexRoute;
  "/posts": typeof PostsIndexRoute;
  "/users": typeof UsersIndexRoute;
  "/posts/$postId/deep": typeof PostsPostIdDeepRoute;
  "/$projectSlug": typeof LayoutProjectSlugIndexRoute;
  "/$projectSlug/$workflowSlug": typeof LayoutProjectSlugWorkflowSlugLayoutIndexRoute;
  "/$projectSlug/$workflowSlug/api": typeof LayoutProjectSlugWorkflowSlugLayoutApiRoute;
  "/$projectSlug/$workflowSlug/versions": typeof LayoutProjectSlugWorkflowSlugLayoutVersionsRoute;
  "/$projectSlug/$workflowSlug/v/$version": typeof LayoutProjectSlugWorkflowSlugVVersionRoute;
  "/$projectSlug/users/users/$userId": typeof LayoutProjectSlugUsersUsersUserIdRoute;
  "/$projectSlug/users/users": typeof LayoutProjectSlugUsersUsersIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_layout": typeof LayoutRouteWithChildren;
  "/_public": typeof PublicRouteWithChildren;
  "/deferred": typeof DeferredRoute;
  "/posts": typeof PostsRouteWithChildren;
  "/redirect": typeof RedirectRoute;
  "/users": typeof UsersRouteWithChildren;
  "/_layout/explore": typeof LayoutExploreRoute;
  "/posts/$postId": typeof PostsPostIdRoute;
  "/users/$userId": typeof UsersUserIdRoute;
  "/_public/": typeof PublicIndexRoute;
  "/posts/": typeof PostsIndexRoute;
  "/users/": typeof UsersIndexRoute;
  "/posts/$postId/deep": typeof PostsPostIdDeepRoute;
  "/_layout/$projectSlug/": typeof LayoutProjectSlugIndexRoute;
  "/_layout/$projectSlug/$workflowSlug": typeof LayoutProjectSlugWorkflowSlugRouteWithChildren;
  "/_layout/$projectSlug/$workflowSlug/_layout": typeof LayoutProjectSlugWorkflowSlugLayoutRouteWithChildren;
  "/_layout/$projectSlug/users/users": typeof LayoutProjectSlugUsersUsersRouteWithChildren;
  "/_layout/$projectSlug/$workflowSlug/_layout/api": typeof LayoutProjectSlugWorkflowSlugLayoutApiRoute;
  "/_layout/$projectSlug/$workflowSlug/_layout/versions": typeof LayoutProjectSlugWorkflowSlugLayoutVersionsRoute;
  "/_layout/$projectSlug/$workflowSlug/v/$version": typeof LayoutProjectSlugWorkflowSlugVVersionRoute;
  "/_layout/$projectSlug/users/users/$userId": typeof LayoutProjectSlugUsersUsersUserIdRoute;
  "/_layout/$projectSlug/$workflowSlug/_layout/": typeof LayoutProjectSlugWorkflowSlugLayoutIndexRoute;
  "/_layout/$projectSlug/users/users/": typeof LayoutProjectSlugUsersUsersIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/deferred"
    | "/posts"
    | "/redirect"
    | "/users"
    | "/explore"
    | "/posts/$postId"
    | "/users/$userId"
    | "/"
    | "/posts/"
    | "/users/"
    | "/posts/$postId/deep"
    | "/$projectSlug"
    | "/$projectSlug/$workflowSlug"
    | "/$projectSlug/users/users"
    | "/$projectSlug/$workflowSlug/api"
    | "/$projectSlug/$workflowSlug/versions"
    | "/$projectSlug/$workflowSlug/v/$version"
    | "/$projectSlug/users/users/$userId"
    | "/$projectSlug/$workflowSlug/"
    | "/$projectSlug/users/users/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | ""
    | "/deferred"
    | "/redirect"
    | "/explore"
    | "/posts/$postId"
    | "/users/$userId"
    | "/"
    | "/posts"
    | "/users"
    | "/posts/$postId/deep"
    | "/$projectSlug"
    | "/$projectSlug/$workflowSlug"
    | "/$projectSlug/$workflowSlug/api"
    | "/$projectSlug/$workflowSlug/versions"
    | "/$projectSlug/$workflowSlug/v/$version"
    | "/$projectSlug/users/users/$userId"
    | "/$projectSlug/users/users";
  id:
    | "__root__"
    | "/_layout"
    | "/_public"
    | "/deferred"
    | "/posts"
    | "/redirect"
    | "/users"
    | "/_layout/explore"
    | "/posts/$postId"
    | "/users/$userId"
    | "/_public/"
    | "/posts/"
    | "/users/"
    | "/posts/$postId/deep"
    | "/_layout/$projectSlug/"
    | "/_layout/$projectSlug/$workflowSlug"
    | "/_layout/$projectSlug/$workflowSlug/_layout"
    | "/_layout/$projectSlug/users/users"
    | "/_layout/$projectSlug/$workflowSlug/_layout/api"
    | "/_layout/$projectSlug/$workflowSlug/_layout/versions"
    | "/_layout/$projectSlug/$workflowSlug/v/$version"
    | "/_layout/$projectSlug/users/users/$userId"
    | "/_layout/$projectSlug/$workflowSlug/_layout/"
    | "/_layout/$projectSlug/users/users/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren;
  PublicRoute: typeof PublicRouteWithChildren;
  DeferredRoute: typeof DeferredRoute;
  PostsRoute: typeof PostsRouteWithChildren;
  RedirectRoute: typeof RedirectRoute;
  UsersRoute: typeof UsersRouteWithChildren;
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute;
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  DeferredRoute: DeferredRoute,
  PostsRoute: PostsRouteWithChildren,
  RedirectRoute: RedirectRoute,
  UsersRoute: UsersRouteWithChildren,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/_public",
        "/deferred",
        "/posts",
        "/redirect",
        "/users",
        "/posts/$postId/deep"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/explore",
        "/_layout/$projectSlug/",
        "/_layout/$projectSlug/$workflowSlug",
        "/_layout/$projectSlug/users/users"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/"
      ]
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/users": {
      "filePath": "users.tsx",
      "children": [
        "/users/$userId",
        "/users/"
      ]
    },
    "/_layout/explore": {
      "filePath": "_layout.explore.tsx",
      "parent": "/_layout"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/users/$userId": {
      "filePath": "users.$userId.tsx",
      "parent": "/users"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/users/": {
      "filePath": "users.index.tsx",
      "parent": "/users"
    },
    "/posts/$postId/deep": {
      "filePath": "posts_.$postId.deep.tsx"
    },
    "/_layout/$projectSlug/": {
      "filePath": "_layout.$projectSlug/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/$projectSlug/$workflowSlug": {
      "filePath": "_layout.$projectSlug/$workflowSlug",
      "parent": "/_layout",
      "children": [
        "/_layout/$projectSlug/$workflowSlug/_layout",
        "/_layout/$projectSlug/$workflowSlug/v/$version"
      ]
    },
    "/_layout/$projectSlug/$workflowSlug/_layout": {
      "filePath": "_layout.$projectSlug/$workflowSlug/_layout.tsx",
      "parent": "/_layout/$projectSlug/$workflowSlug",
      "children": [
        "/_layout/$projectSlug/$workflowSlug/_layout/api",
        "/_layout/$projectSlug/$workflowSlug/_layout/versions",
        "/_layout/$projectSlug/$workflowSlug/_layout/"
      ]
    },
    "/_layout/$projectSlug/users/users": {
      "filePath": "_layout.$projectSlug/users/users.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/$projectSlug/users/users/$userId",
        "/_layout/$projectSlug/users/users/"
      ]
    },
    "/_layout/$projectSlug/$workflowSlug/_layout/api": {
      "filePath": "_layout.$projectSlug/$workflowSlug/_layout.api.tsx",
      "parent": "/_layout/$projectSlug/$workflowSlug/_layout"
    },
    "/_layout/$projectSlug/$workflowSlug/_layout/versions": {
      "filePath": "_layout.$projectSlug/$workflowSlug/_layout.versions.tsx",
      "parent": "/_layout/$projectSlug/$workflowSlug/_layout"
    },
    "/_layout/$projectSlug/$workflowSlug/v/$version": {
      "filePath": "_layout.$projectSlug/$workflowSlug.v.$version.tsx",
      "parent": "/_layout/$projectSlug/$workflowSlug"
    },
    "/_layout/$projectSlug/users/users/$userId": {
      "filePath": "_layout.$projectSlug/users/users.$userId.tsx",
      "parent": "/_layout/$projectSlug/users/users"
    },
    "/_layout/$projectSlug/$workflowSlug/_layout/": {
      "filePath": "_layout.$projectSlug/$workflowSlug/_layout.index.tsx",
      "parent": "/_layout/$projectSlug/$workflowSlug/_layout"
    },
    "/_layout/$projectSlug/users/users/": {
      "filePath": "_layout.$projectSlug/users/users.index.tsx",
      "parent": "/_layout/$projectSlug/users/users"
    }
  }
}
ROUTE_MANIFEST_END */
