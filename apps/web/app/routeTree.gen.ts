/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as RedirectImport } from './routes/redirect'
import { Route as PostsImport } from './routes/posts'
import { Route as DeferredImport } from './routes/deferred'
import { Route as PublicImport } from './routes/_public'
import { Route as LayoutImport } from './routes/_layout'
import { Route as UsersIndexImport } from './routes/users.index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as UsersUserIdImport } from './routes/users.$userId'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as LayoutExploreImport } from './routes/_layout.explore'
import { Route as LayoutOrgSlugIndexImport } from './routes/_layout.$orgSlug/index'
import { Route as PostsPostIdDeepImport } from './routes/posts_.$postId.deep'
import { Route as LayoutOrgSlugWorkflowSlugLayoutImport } from './routes/_layout.$orgSlug/$workflowSlug/_layout'
import { Route as LayoutOrgSlugWorkflowSlugLayoutIndexImport } from './routes/_layout.$orgSlug/$workflowSlug/_layout.index'
import { Route as LayoutOrgSlugWorkflowSlugVVersionImport } from './routes/_layout.$orgSlug/$workflowSlug.v.$version'
import { Route as LayoutOrgSlugWorkflowSlugLayoutVersionsImport } from './routes/_layout.$orgSlug/$workflowSlug/_layout.versions'
import { Route as LayoutOrgSlugWorkflowSlugLayoutApiImport } from './routes/_layout.$orgSlug/$workflowSlug/_layout.api'

// Create Virtual Routes

const LayoutOrgSlugWorkflowSlugImport = createFileRoute(
  '/_layout/$orgSlug/$workflowSlug',
)()

// Create/Update Routes

const UsersRoute = UsersImport.update({
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const PostsRoute = PostsImport.update({
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  path: '/',
  getParentRoute: () => UsersRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  path: '/$userId',
  getParentRoute: () => UsersRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

const LayoutExploreRoute = LayoutExploreImport.update({
  path: '/explore',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutOrgSlugWorkflowSlugRoute = LayoutOrgSlugWorkflowSlugImport.update({
  path: '/$orgSlug/$workflowSlug',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutOrgSlugIndexRoute = LayoutOrgSlugIndexImport.update({
  path: '/$orgSlug/',
  getParentRoute: () => LayoutRoute,
} as any)

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRoute,
} as any)

const LayoutOrgSlugWorkflowSlugLayoutRoute =
  LayoutOrgSlugWorkflowSlugLayoutImport.update({
    id: '/_layout',
    getParentRoute: () => LayoutOrgSlugWorkflowSlugRoute,
  } as any)

const LayoutOrgSlugWorkflowSlugLayoutIndexRoute =
  LayoutOrgSlugWorkflowSlugLayoutIndexImport.update({
    path: '/',
    getParentRoute: () => LayoutOrgSlugWorkflowSlugLayoutRoute,
  } as any)

const LayoutOrgSlugWorkflowSlugVVersionRoute =
  LayoutOrgSlugWorkflowSlugVVersionImport.update({
    path: '/v/$version',
    getParentRoute: () => LayoutOrgSlugWorkflowSlugRoute,
  } as any)

const LayoutOrgSlugWorkflowSlugLayoutVersionsRoute =
  LayoutOrgSlugWorkflowSlugLayoutVersionsImport.update({
    path: '/versions',
    getParentRoute: () => LayoutOrgSlugWorkflowSlugLayoutRoute,
  } as any)

const LayoutOrgSlugWorkflowSlugLayoutApiRoute =
  LayoutOrgSlugWorkflowSlugLayoutApiImport.update({
    path: '/api',
    getParentRoute: () => LayoutOrgSlugWorkflowSlugLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/_layout/explore': {
      id: '/_layout/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof LayoutExploreImport
      parentRoute: typeof LayoutImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof UsersImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof UsersImport
    }
    '/posts/$postId/deep': {
      id: '/posts/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepImport
      parentRoute: typeof rootRoute
    }
    '/_layout/$orgSlug/': {
      id: '/_layout/$orgSlug/'
      path: '/$orgSlug'
      fullPath: '/$orgSlug'
      preLoaderRoute: typeof LayoutOrgSlugIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$orgSlug/$workflowSlug': {
      id: '/_layout/$orgSlug/$workflowSlug'
      path: '/$orgSlug/$workflowSlug'
      fullPath: '/$orgSlug/$workflowSlug'
      preLoaderRoute: typeof LayoutOrgSlugWorkflowSlugImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$orgSlug/$workflowSlug/_layout': {
      id: '/_layout/$orgSlug/$workflowSlug/_layout'
      path: '/$orgSlug/$workflowSlug'
      fullPath: '/$orgSlug/$workflowSlug'
      preLoaderRoute: typeof LayoutOrgSlugWorkflowSlugLayoutImport
      parentRoute: typeof LayoutOrgSlugWorkflowSlugRoute
    }
    '/_layout/$orgSlug/$workflowSlug/_layout/api': {
      id: '/_layout/$orgSlug/$workflowSlug/_layout/api'
      path: '/api'
      fullPath: '/$orgSlug/$workflowSlug/api'
      preLoaderRoute: typeof LayoutOrgSlugWorkflowSlugLayoutApiImport
      parentRoute: typeof LayoutOrgSlugWorkflowSlugLayoutImport
    }
    '/_layout/$orgSlug/$workflowSlug/_layout/versions': {
      id: '/_layout/$orgSlug/$workflowSlug/_layout/versions'
      path: '/versions'
      fullPath: '/$orgSlug/$workflowSlug/versions'
      preLoaderRoute: typeof LayoutOrgSlugWorkflowSlugLayoutVersionsImport
      parentRoute: typeof LayoutOrgSlugWorkflowSlugLayoutImport
    }
    '/_layout/$orgSlug/$workflowSlug/v/$version': {
      id: '/_layout/$orgSlug/$workflowSlug/v/$version'
      path: '/v/$version'
      fullPath: '/$orgSlug/$workflowSlug/v/$version'
      preLoaderRoute: typeof LayoutOrgSlugWorkflowSlugVVersionImport
      parentRoute: typeof LayoutOrgSlugWorkflowSlugImport
    }
    '/_layout/$orgSlug/$workflowSlug/_layout/': {
      id: '/_layout/$orgSlug/$workflowSlug/_layout/'
      path: '/'
      fullPath: '/$orgSlug/$workflowSlug/'
      preLoaderRoute: typeof LayoutOrgSlugWorkflowSlugLayoutIndexImport
      parentRoute: typeof LayoutOrgSlugWorkflowSlugLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutOrgSlugWorkflowSlugLayoutRouteChildren {
  LayoutOrgSlugWorkflowSlugLayoutApiRoute: typeof LayoutOrgSlugWorkflowSlugLayoutApiRoute
  LayoutOrgSlugWorkflowSlugLayoutVersionsRoute: typeof LayoutOrgSlugWorkflowSlugLayoutVersionsRoute
  LayoutOrgSlugWorkflowSlugLayoutIndexRoute: typeof LayoutOrgSlugWorkflowSlugLayoutIndexRoute
}

const LayoutOrgSlugWorkflowSlugLayoutRouteChildren: LayoutOrgSlugWorkflowSlugLayoutRouteChildren =
  {
    LayoutOrgSlugWorkflowSlugLayoutApiRoute:
      LayoutOrgSlugWorkflowSlugLayoutApiRoute,
    LayoutOrgSlugWorkflowSlugLayoutVersionsRoute:
      LayoutOrgSlugWorkflowSlugLayoutVersionsRoute,
    LayoutOrgSlugWorkflowSlugLayoutIndexRoute:
      LayoutOrgSlugWorkflowSlugLayoutIndexRoute,
  }

const LayoutOrgSlugWorkflowSlugLayoutRouteWithChildren =
  LayoutOrgSlugWorkflowSlugLayoutRoute._addFileChildren(
    LayoutOrgSlugWorkflowSlugLayoutRouteChildren,
  )

interface LayoutOrgSlugWorkflowSlugRouteChildren {
  LayoutOrgSlugWorkflowSlugLayoutRoute: typeof LayoutOrgSlugWorkflowSlugLayoutRouteWithChildren
  LayoutOrgSlugWorkflowSlugVVersionRoute: typeof LayoutOrgSlugWorkflowSlugVVersionRoute
}

const LayoutOrgSlugWorkflowSlugRouteChildren: LayoutOrgSlugWorkflowSlugRouteChildren =
  {
    LayoutOrgSlugWorkflowSlugLayoutRoute:
      LayoutOrgSlugWorkflowSlugLayoutRouteWithChildren,
    LayoutOrgSlugWorkflowSlugVVersionRoute:
      LayoutOrgSlugWorkflowSlugVVersionRoute,
  }

const LayoutOrgSlugWorkflowSlugRouteWithChildren =
  LayoutOrgSlugWorkflowSlugRoute._addFileChildren(
    LayoutOrgSlugWorkflowSlugRouteChildren,
  )

interface LayoutRouteChildren {
  LayoutExploreRoute: typeof LayoutExploreRoute
  LayoutOrgSlugIndexRoute: typeof LayoutOrgSlugIndexRoute
  LayoutOrgSlugWorkflowSlugRoute: typeof LayoutOrgSlugWorkflowSlugRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutExploreRoute: LayoutExploreRoute,
  LayoutOrgSlugIndexRoute: LayoutOrgSlugIndexRoute,
  LayoutOrgSlugWorkflowSlugRoute: LayoutOrgSlugWorkflowSlugRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface PublicRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

interface UsersRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/users': typeof UsersRouteWithChildren
  '/explore': typeof LayoutExploreRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/': typeof PublicIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/$orgSlug': typeof LayoutOrgSlugIndexRoute
  '/$orgSlug/$workflowSlug': typeof LayoutOrgSlugWorkflowSlugLayoutRouteWithChildren
  '/$orgSlug/$workflowSlug/api': typeof LayoutOrgSlugWorkflowSlugLayoutApiRoute
  '/$orgSlug/$workflowSlug/versions': typeof LayoutOrgSlugWorkflowSlugLayoutVersionsRoute
  '/$orgSlug/$workflowSlug/v/$version': typeof LayoutOrgSlugWorkflowSlugVVersionRoute
  '/$orgSlug/$workflowSlug/': typeof LayoutOrgSlugWorkflowSlugLayoutIndexRoute
}

export interface FileRoutesByTo {
  '': typeof LayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/explore': typeof LayoutExploreRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/': typeof PublicIndexRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/$orgSlug': typeof LayoutOrgSlugIndexRoute
  '/$orgSlug/$workflowSlug': typeof LayoutOrgSlugWorkflowSlugLayoutIndexRoute
  '/$orgSlug/$workflowSlug/api': typeof LayoutOrgSlugWorkflowSlugLayoutApiRoute
  '/$orgSlug/$workflowSlug/versions': typeof LayoutOrgSlugWorkflowSlugLayoutVersionsRoute
  '/$orgSlug/$workflowSlug/v/$version': typeof LayoutOrgSlugWorkflowSlugVVersionRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/users': typeof UsersRouteWithChildren
  '/_layout/explore': typeof LayoutExploreRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/_public/': typeof PublicIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/_layout/$orgSlug/': typeof LayoutOrgSlugIndexRoute
  '/_layout/$orgSlug/$workflowSlug': typeof LayoutOrgSlugWorkflowSlugRouteWithChildren
  '/_layout/$orgSlug/$workflowSlug/_layout': typeof LayoutOrgSlugWorkflowSlugLayoutRouteWithChildren
  '/_layout/$orgSlug/$workflowSlug/_layout/api': typeof LayoutOrgSlugWorkflowSlugLayoutApiRoute
  '/_layout/$orgSlug/$workflowSlug/_layout/versions': typeof LayoutOrgSlugWorkflowSlugLayoutVersionsRoute
  '/_layout/$orgSlug/$workflowSlug/v/$version': typeof LayoutOrgSlugWorkflowSlugVVersionRoute
  '/_layout/$orgSlug/$workflowSlug/_layout/': typeof LayoutOrgSlugWorkflowSlugLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/deferred'
    | '/posts'
    | '/redirect'
    | '/users'
    | '/explore'
    | '/posts/$postId'
    | '/users/$userId'
    | '/'
    | '/posts/'
    | '/users/'
    | '/posts/$postId/deep'
    | '/$orgSlug'
    | '/$orgSlug/$workflowSlug'
    | '/$orgSlug/$workflowSlug/api'
    | '/$orgSlug/$workflowSlug/versions'
    | '/$orgSlug/$workflowSlug/v/$version'
    | '/$orgSlug/$workflowSlug/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/deferred'
    | '/redirect'
    | '/explore'
    | '/posts/$postId'
    | '/users/$userId'
    | '/'
    | '/posts'
    | '/users'
    | '/posts/$postId/deep'
    | '/$orgSlug'
    | '/$orgSlug/$workflowSlug'
    | '/$orgSlug/$workflowSlug/api'
    | '/$orgSlug/$workflowSlug/versions'
    | '/$orgSlug/$workflowSlug/v/$version'
  id:
    | '__root__'
    | '/_layout'
    | '/_public'
    | '/deferred'
    | '/posts'
    | '/redirect'
    | '/users'
    | '/_layout/explore'
    | '/posts/$postId'
    | '/users/$userId'
    | '/_public/'
    | '/posts/'
    | '/users/'
    | '/posts/$postId/deep'
    | '/_layout/$orgSlug/'
    | '/_layout/$orgSlug/$workflowSlug'
    | '/_layout/$orgSlug/$workflowSlug/_layout'
    | '/_layout/$orgSlug/$workflowSlug/_layout/api'
    | '/_layout/$orgSlug/$workflowSlug/_layout/versions'
    | '/_layout/$orgSlug/$workflowSlug/v/$version'
    | '/_layout/$orgSlug/$workflowSlug/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  DeferredRoute: typeof DeferredRoute
  PostsRoute: typeof PostsRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  UsersRoute: typeof UsersRouteWithChildren
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  DeferredRoute: DeferredRoute,
  PostsRoute: PostsRouteWithChildren,
  RedirectRoute: RedirectRoute,
  UsersRoute: UsersRouteWithChildren,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/_public",
        "/deferred",
        "/posts",
        "/redirect",
        "/users",
        "/posts/$postId/deep"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/explore",
        "/_layout/$orgSlug/",
        "/_layout/$orgSlug/$workflowSlug"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/"
      ]
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/users": {
      "filePath": "users.tsx",
      "children": [
        "/users/$userId",
        "/users/"
      ]
    },
    "/_layout/explore": {
      "filePath": "_layout.explore.tsx",
      "parent": "/_layout"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/users/$userId": {
      "filePath": "users.$userId.tsx",
      "parent": "/users"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/users/": {
      "filePath": "users.index.tsx",
      "parent": "/users"
    },
    "/posts/$postId/deep": {
      "filePath": "posts_.$postId.deep.tsx"
    },
    "/_layout/$orgSlug/": {
      "filePath": "_layout.$orgSlug/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/$orgSlug/$workflowSlug": {
      "filePath": "_layout.$orgSlug/$workflowSlug",
      "parent": "/_layout",
      "children": [
        "/_layout/$orgSlug/$workflowSlug/_layout",
        "/_layout/$orgSlug/$workflowSlug/v/$version"
      ]
    },
    "/_layout/$orgSlug/$workflowSlug/_layout": {
      "filePath": "_layout.$orgSlug/$workflowSlug/_layout.tsx",
      "parent": "/_layout/$orgSlug/$workflowSlug",
      "children": [
        "/_layout/$orgSlug/$workflowSlug/_layout/api",
        "/_layout/$orgSlug/$workflowSlug/_layout/versions",
        "/_layout/$orgSlug/$workflowSlug/_layout/"
      ]
    },
    "/_layout/$orgSlug/$workflowSlug/_layout/api": {
      "filePath": "_layout.$orgSlug/$workflowSlug/_layout.api.tsx",
      "parent": "/_layout/$orgSlug/$workflowSlug/_layout"
    },
    "/_layout/$orgSlug/$workflowSlug/_layout/versions": {
      "filePath": "_layout.$orgSlug/$workflowSlug/_layout.versions.tsx",
      "parent": "/_layout/$orgSlug/$workflowSlug/_layout"
    },
    "/_layout/$orgSlug/$workflowSlug/v/$version": {
      "filePath": "_layout.$orgSlug/$workflowSlug.v.$version.tsx",
      "parent": "/_layout/$orgSlug/$workflowSlug"
    },
    "/_layout/$orgSlug/$workflowSlug/_layout/": {
      "filePath": "_layout.$orgSlug/$workflowSlug/_layout.index.tsx",
      "parent": "/_layout/$orgSlug/$workflowSlug/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
